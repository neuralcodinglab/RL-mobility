Description:
  NAME: demo
  DESCR: Test performance at different phosphene resolutions in complex and plain environment

Unity settings: # (not used by python, just here for documentation)
  FWD_REWARD: 10
  SIDE_REWARD: -1
  BOX_REWARD: -20
  WALL_REWARD: -15
  TARGET_STEP_REWARD: 10
  N_TARGET_STEPS: 100
  LIGHT_INTENSITY: 1.0

Train settings:
  SAVEDIR: '.\Demo\TrainingDemo'
  DEVICE: 'cuda:0'
  OPTIMIZER: adam
  LR_DQN: 0.01
  BATCH_SIZE: 128 # original 128
  VALIDATE_EVERY: 50 # episodes
  MAX_EPISODES: 1200 # (stops when either one of these are reached)
  MAX_OPTIM_STEPS: 1.0e+7 # (stops when either one of these are reached)
  OPTIMIZATIONS_PER_STEP: 10
  REWARD_MULTIPLIER: 1. # To

  # Events that trigger reset of the environment
  RESET_END_IS_0: False # Nothing happened
  RESET_END_IS_1: True # Box collision
  RESET_END_IS_2: False # Wall collision
  RESET_END_IS_3: True # Reached step target
  RESET_AFTER_NR_SIDESTEPS: 5
  EARLY_STOP_REWARD: -1000

Environment:
  IMSIZE: 128
  STACK_SIZE: 4
  N_ACTIONS: 3
  IP: "127.0.0.1"   # Ip address that the TCP/IP interface listens to
  PORT: 13000       # Port number that the TCP/IP interface listens to
  COMPLEXITY: ['plain', 'complex']

Agent:
  SEED: [0, 1] # Random seed initialization
  GAMMA: 0.9
  EPS_START: 0.95
  EPS_END: 0.05
  EPS_DELTA: -1.125e-4 # for a 4000-steps decay:  (0.05-0.95)/4000 = -1.125e-4
  REPLAY_START_SIZE:  1500
  TARGET_UPDATE: 10 #episodes
  MEMORY_CAPACITY: 12000

Image processing:
  MODE: edge-detection # e.g. choose from ['edge-detection', 'camera-vision', 'no-vision']. Other modes not implemented yet
  PHOSPHENE_RESOLUTION: 42 #[42, 18]
  EDGE_THRESHOLD: #leave empty for default values
  DEPTH_THRESH:
